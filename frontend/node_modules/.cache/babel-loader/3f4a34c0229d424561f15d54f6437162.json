{"ast":null,"code":"import { AUTH_FORM_SUCCESS, AUTH_FORM_FAIL, AUTH_ERROR, USER_IS_LOADED, LOG_OUT } from \"../constants/auth.constants\";\nimport axios from \"axios\"; //allows you to user get, post, delete, put etc...\n\nimport setAuthenticationToken from \"../middleware/setAuthenticationToken\"; //grabs middleware for grabbing token\n\nexport const userLoaded = () => async dispatch => {\n  if (localStorage.getItem(\"token\")) {\n    setAuthenticationToken(localStorage.getItem(\"token\"));\n  }\n\n  try {\n    const response = axios.get(\"http://localhost:5000/api/users/\"); // this url needs to be changed for Heroku\n\n    dispatch({\n      type: USER_IS_LOADED,\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //userData would be all the data that we want to take from the user like name lastName userName etc...\n\nexport const registerUser = userData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify(userData);\n    const response = await axios.post(\"http://localhost:5000/api/users/register\", body, config); // this url needs to be changed for Heroku\n\n    dispatch({\n      type: AUTH_FORM_SUCCESS,\n      payload: response.data\n    });\n    dispatch(userLoaded());\n  } catch (error) {\n    dispatch({\n      type: AUTH_FORM_FAIL,\n      payload: error\n    });\n  }\n};\nexport const loginUser = userData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify(userData);\n    const response = await axios.post(\"http://localhost:5000/api/users/login\", body, config); // this url needs to be changed for Heroku\n\n    dispatch({\n      type: AUTH_FORM_SUCCESS,\n      payload: response.data\n    });\n    dispatch(userLoaded());\n  } catch (error) {\n    dispatch({\n      type: AUTH_FORM_FAIL,\n      payload: error\n    });\n  }\n};\nexport const logOut = () => dispatch => {\n  dispatch({\n    type: LOG_OUT\n  });\n};","map":{"version":3,"sources":["C:/Users/rcoro/Documents/UCLA/ClassAssignments/Homework/project3/project-3/frontend/src/actions/auth.actions.js"],"names":["AUTH_FORM_SUCCESS","AUTH_FORM_FAIL","AUTH_ERROR","USER_IS_LOADED","LOG_OUT","axios","setAuthenticationToken","userLoaded","dispatch","localStorage","getItem","response","get","type","payload","data","error","registerUser","userData","config","headers","body","JSON","stringify","post","loginUser","logOut"],"mappings":"AAAA,SACEA,iBADF,EAEEC,cAFF,EAGEC,UAHF,EAIEC,cAJF,EAKEC,OALF,QAMO,6BANP;AAQA,OAAOC,KAAP,MAAkB,OAAlB,C,CAA2B;;AAC3B,OAAOC,sBAAP,MAAmC,sCAAnC,C,CAA2E;;AAE3E,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAClD,MAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjCJ,IAAAA,sBAAsB,CAACG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAtB;AACD;;AACD,MAAI;AACF,UAAMC,QAAQ,GAAGN,KAAK,CAACO,GAAN,CAAU,kCAAV,CAAjB,CADE,CAC8D;;AAEhEJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEV,cADC;AAEPW,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFX,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;AAGD;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAMe,YAAY,GAAIC,QAAD,IAAc,MAAOV,QAAP,IAAoB;AAC5D,MAAI;AACF,UAAMW,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAb;AAEA,UAAMP,QAAQ,GAAG,MAAMN,KAAK,CAACmB,IAAN,CACrB,0CADqB,EAErBH,IAFqB,EAGrBF,MAHqB,CAAvB,CATE,CAaC;;AAEHX,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEb,iBADC;AAEPc,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFX,KAAD,CAAR;AAIAP,IAAAA,QAAQ,CAACD,UAAU,EAAX,CAAR;AACD,GApBD,CAoBE,OAAOS,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEZ,cADC;AAEPa,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAID;AACF,CA3BM;AA6BP,OAAO,MAAMS,SAAS,GAAIP,QAAD,IAAc,MAAOV,QAAP,IAAoB;AACzD,MAAI;AACF,UAAMW,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeL,QAAf,CAAb;AAEA,UAAMP,QAAQ,GAAG,MAAMN,KAAK,CAACmB,IAAN,CACrB,uCADqB,EAErBH,IAFqB,EAGrBF,MAHqB,CAAvB,CATE,CAaC;;AAEHX,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEb,iBADC;AAEPc,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAFX,KAAD,CAAR;AAIAP,IAAAA,QAAQ,CAACD,UAAU,EAAX,CAAR;AACD,GApBD,CAoBE,OAAOS,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEZ,cADC;AAEPa,MAAAA,OAAO,EAAEE;AAFF,KAAD,CAAR;AAID;AACF,CA3BM;AA6BP,OAAO,MAAMU,MAAM,GAAG,MAAOlB,QAAD,IAAc;AACxCA,EAAAA,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAET;AAAR,GAAD,CAAR;AACD,CAFM","sourcesContent":["import {\n  AUTH_FORM_SUCCESS,\n  AUTH_FORM_FAIL,\n  AUTH_ERROR,\n  USER_IS_LOADED,\n  LOG_OUT,\n} from \"../constants/auth.constants\";\n\nimport axios from \"axios\"; //allows you to user get, post, delete, put etc...\nimport setAuthenticationToken from \"../middleware/setAuthenticationToken\"; //grabs middleware for grabbing token\n\nexport const userLoaded = () => async (dispatch) => {\n  if (localStorage.getItem(\"token\")) {\n    setAuthenticationToken(localStorage.getItem(\"token\"));\n  }\n  try {\n    const response = axios.get(\"http://localhost:5000/api/users/\"); // this url needs to be changed for Heroku\n\n    dispatch({\n      type: USER_IS_LOADED,\n      payload: response.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n//userData would be all the data that we want to take from the user like name lastName userName etc...\nexport const registerUser = (userData) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const body = JSON.stringify(userData);\n\n    const response = await axios.post(\n      \"http://localhost:5000/api/users/register\",\n      body,\n      config\n    ); // this url needs to be changed for Heroku\n\n    dispatch({\n      type: AUTH_FORM_SUCCESS,\n      payload: response.data,\n    });\n    dispatch(userLoaded());\n  } catch (error) {\n    dispatch({\n      type: AUTH_FORM_FAIL,\n      payload: error,\n    });\n  }\n};\n\nexport const loginUser = (userData) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const body = JSON.stringify(userData);\n\n    const response = await axios.post(\n      \"http://localhost:5000/api/users/login\",\n      body,\n      config\n    ); // this url needs to be changed for Heroku\n\n    dispatch({\n      type: AUTH_FORM_SUCCESS,\n      payload: response.data,\n    });\n    dispatch(userLoaded());\n  } catch (error) {\n    dispatch({\n      type: AUTH_FORM_FAIL,\n      payload: error,\n    });\n  }\n};\n\nexport const logOut = () => (dispatch) => {\n  dispatch({ type: LOG_OUT });\n};\n"]},"metadata":{},"sourceType":"module"}